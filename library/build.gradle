apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        // Disable 'NewApi' checking due to false errors in old version of lint tool, until sdk-tool-25.4 is deployed on Travis-CI.
        disable 'NewApi'
        textOutput 'stdout'
        textReport true
    }

    adbOptions {
        timeOutInMs 20 * 60 * 1000      // Extend to 20 minutes for Travis-CI.
        installOptions "-d","-t"
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'com.google.code.findbugs:jsr305:3.0.1'
    implementation 'com.android.support:support-annotations:28.0.0'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'

    testImplementation 'junit:junit:4.12'
}

android.libraryVariants.all { variant ->
    String taskName = String.format("remove%sStubClasses", variant.name.capitalize())
    task "${taskName}" {
        doLast { delete "${buildDir}/intermediates/javac/${variant.name}/compile${variant.name}JavaWithJavac/classes/android" }
    }
    variant.processJavaResources.dependsOn(taskName)
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) + configurations.compile

    exclude "com/oasisfeng/condom/util/**.java"
    exclude "android/**.java"
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

if (file('deploy.gradle').exists()) apply from: 'deploy.gradle'
